// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto_row.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:proto.common.row)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Row {
    // message fields
    // @@protoc_insertion_point(field:proto.common.row.columns)
    pub columns: ::std::vec::Vec<Column>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.common.row.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Row {
    fn default() -> &'a Row {
        <Row as ::protobuf::Message>::default_instance()
    }
}

impl Row {
    pub fn new() -> Row {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "columns",
            |m: &Row| { &m.columns },
            |m: &mut Row| { &mut m.columns },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Row>(
            "row",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Row {
    const NAME: &'static str = "row";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.columns.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.columns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.columns {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Row {
        Row::new()
    }

    fn clear(&mut self) {
        self.columns.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Row {
        static instance: Row = Row {
            columns: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Row {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("row").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Row {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Row {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.common.column)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Column {
    // message fields
    // @@protoc_insertion_point(field:proto.common.column.id)
    pub id: u32,
    // @@protoc_insertion_point(field:proto.common.column.field)
    pub field: ::std::string::String,
    // @@protoc_insertion_point(field:proto.common.column.dt)
    pub dt: ::protobuf::EnumOrUnknown<DataType>,
    // @@protoc_insertion_point(field:proto.common.column.i32_val)
    pub i32_val: i32,
    // @@protoc_insertion_point(field:proto.common.column.i64_val)
    pub i64_val: i64,
    // @@protoc_insertion_point(field:proto.common.column.f64_val)
    pub f64_val: f64,
    // @@protoc_insertion_point(field:proto.common.column.str_val)
    pub str_val: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.common.column.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Column {
    fn default() -> &'a Column {
        <Column as ::protobuf::Message>::default_instance()
    }
}

impl Column {
    pub fn new() -> Column {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Column| { &m.id },
            |m: &mut Column| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "field",
            |m: &Column| { &m.field },
            |m: &mut Column| { &mut m.field },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "dt",
            |m: &Column| { &m.dt },
            |m: &mut Column| { &mut m.dt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "i32_val",
            |m: &Column| { &m.i32_val },
            |m: &mut Column| { &mut m.i32_val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "i64_val",
            |m: &Column| { &m.i64_val },
            |m: &mut Column| { &mut m.i64_val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "f64_val",
            |m: &Column| { &m.f64_val },
            |m: &mut Column| { &mut m.f64_val },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "str_val",
            |m: &Column| { &m.str_val },
            |m: &mut Column| { &mut m.str_val },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Column>(
            "column",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Column {
    const NAME: &'static str = "column";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    self.field = is.read_string()?;
                },
                24 => {
                    self.dt = is.read_enum_or_unknown()?;
                },
                32 => {
                    self.i32_val = is.read_int32()?;
                },
                40 => {
                    self.i64_val = is.read_int64()?;
                },
                49 => {
                    self.f64_val = is.read_double()?;
                },
                58 => {
                    self.str_val = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field);
        }
        if self.dt != ::protobuf::EnumOrUnknown::new(DataType::unknown) {
            my_size += ::protobuf::rt::int32_size(3, self.dt.value());
        }
        if self.i32_val != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.i32_val);
        }
        if self.i64_val != 0 {
            my_size += ::protobuf::rt::int64_size(5, self.i64_val);
        }
        if self.f64_val != 0. {
            my_size += 1 + 8;
        }
        if !self.str_val.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.str_val);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if !self.field.is_empty() {
            os.write_string(2, &self.field)?;
        }
        if self.dt != ::protobuf::EnumOrUnknown::new(DataType::unknown) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.dt))?;
        }
        if self.i32_val != 0 {
            os.write_int32(4, self.i32_val)?;
        }
        if self.i64_val != 0 {
            os.write_int64(5, self.i64_val)?;
        }
        if self.f64_val != 0. {
            os.write_double(6, self.f64_val)?;
        }
        if !self.str_val.is_empty() {
            os.write_string(7, &self.str_val)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Column {
        Column::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.field.clear();
        self.dt = ::protobuf::EnumOrUnknown::new(DataType::unknown);
        self.i32_val = 0;
        self.i64_val = 0;
        self.f64_val = 0.;
        self.str_val.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Column {
        static instance: Column = Column {
            id: 0,
            field: ::std::string::String::new(),
            dt: ::protobuf::EnumOrUnknown::from_i32(0),
            i32_val: 0,
            i64_val: 0,
            f64_val: 0.,
            str_val: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Column {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("column").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Column {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Column {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:proto.common.DataType)
pub enum DataType {
    // @@protoc_insertion_point(enum_value:proto.common.DataType.unknown)
    unknown = 0,
    // @@protoc_insertion_point(enum_value:proto.common.DataType.i32)
    i32 = 1,
    // @@protoc_insertion_point(enum_value:proto.common.DataType.i64)
    i64 = 2,
    // @@protoc_insertion_point(enum_value:proto.common.DataType.f64)
    f64 = 3,
    // @@protoc_insertion_point(enum_value:proto.common.DataType.str)
    str = 4,
}

impl ::protobuf::Enum for DataType {
    const NAME: &'static str = "DataType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataType> {
        match value {
            0 => ::std::option::Option::Some(DataType::unknown),
            1 => ::std::option::Option::Some(DataType::i32),
            2 => ::std::option::Option::Some(DataType::i64),
            3 => ::std::option::Option::Some(DataType::f64),
            4 => ::std::option::Option::Some(DataType::str),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DataType> {
        match str {
            "unknown" => ::std::option::Option::Some(DataType::unknown),
            "i32" => ::std::option::Option::Some(DataType::i32),
            "i64" => ::std::option::Option::Some(DataType::i64),
            "f64" => ::std::option::Option::Some(DataType::f64),
            "str" => ::std::option::Option::Some(DataType::str),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataType] = &[
        DataType::unknown,
        DataType::i32,
        DataType::i64,
        DataType::f64,
        DataType::str,
    ];
}

impl ::protobuf::EnumFull for DataType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataType {
    fn default() -> Self {
        DataType::unknown
    }
}

impl DataType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataType>("DataType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fproto_row.proto\x12\x0cproto.common\"5\n\x03row\x12.\n\x07columns\
    \x18\x01\x20\x03(\x0b2\x14.proto.common.columnR\x07columns\"\xba\x01\n\
    \x06column\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x14\n\x05field\
    \x18\x02\x20\x01(\tR\x05field\x12&\n\x02dt\x18\x03\x20\x01(\x0e2\x16.pro\
    to.common.DataTypeR\x02dt\x12\x17\n\x07i32_val\x18\x04\x20\x01(\x05R\x06\
    i32Val\x12\x17\n\x07i64_val\x18\x05\x20\x01(\x03R\x06i64Val\x12\x17\n\
    \x07f64_val\x18\x06\x20\x01(\x01R\x06f64Val\x12\x17\n\x07str_val\x18\x07\
    \x20\x01(\tR\x06strVal*;\n\x08DataType\x12\x0b\n\x07unknown\x10\0\x12\
    \x07\n\x03i32\x10\x01\x12\x07\n\x03i64\x10\x02\x12\x07\n\x03f64\x10\x03\
    \x12\x07\n\x03str\x10\x04J\xf7\x05\n\x06\x12\x04\0\0\x18\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x15\n\n\n\x02\x04\0\
    \x12\x04\x03\0\x05\x01\n\n\n\x03\x04\0\x01\x12\x03\x03\x08\x0b\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x04\x02\x1e\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x04\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x04\x0b\x11\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x04\x12\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x04\x1c\x1d\n\n\n\x02\x05\0\x12\x04\x07\0\r\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x07\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03\x08\x02\x0e\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x08\x02\t\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x08\x0c\r\n\x0b\n\x04\x05\0\x02\x01\x12\x03\t\x02\n\n\x0c\n\x05\x05\0\
    \x02\x01\x01\x12\x03\t\x02\x05\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\t\
    \x08\t\n\x0b\n\x04\x05\0\x02\x02\x12\x03\n\x02\n\n\x0c\n\x05\x05\0\x02\
    \x02\x01\x12\x03\n\x02\x05\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\n\x08\t\
    \n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0b\x02\n\n\x0c\n\x05\x05\0\x02\x03\
    \x01\x12\x03\x0b\x02\x05\n\x0c\n\x05\x05\0\x02\x03\x02\x12\x03\x0b\x08\t\
    \n\x0b\n\x04\x05\0\x02\x04\x12\x03\x0c\x02\n\n\x0c\n\x05\x05\0\x02\x04\
    \x01\x12\x03\x0c\x02\x05\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\x0c\x08\t\
    \n\n\n\x02\x04\x01\x12\x04\x0f\0\x18\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \x0f\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x10\x02\x10\n\x0c\n\x05\
    \x04\x01\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\
    \x03\x10\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10\x0e\x0f\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x11\x02\x13\n\x0c\n\x05\x04\x01\x02\x01\x05\
    \x12\x03\x11\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x11\t\x0e\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x11\x11\x12\n\x0b\n\x04\x04\x01\
    \x02\x02\x12\x03\x12\x02\x12\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x12\
    \x02\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x12\x0b\r\n\x0c\n\x05\x04\
    \x01\x02\x02\x03\x12\x03\x12\x10\x11\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\
    \x14\x02\x14\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x14\x02\x07\n\x0c\n\
    \x05\x04\x01\x02\x03\x01\x12\x03\x14\x08\x0f\n\x0c\n\x05\x04\x01\x02\x03\
    \x03\x12\x03\x14\x12\x13\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x15\x02\x14\
    \n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\x01\
    \x02\x04\x01\x12\x03\x15\x08\x0f\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\
    \x15\x12\x13\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x16\x02\x15\n\x0c\n\x05\
    \x04\x01\x02\x05\x05\x12\x03\x16\x02\x08\n\x0c\n\x05\x04\x01\x02\x05\x01\
    \x12\x03\x16\t\x10\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x16\x13\x14\n\
    \x0b\n\x04\x04\x01\x02\x06\x12\x03\x17\x02\x15\n\x0c\n\x05\x04\x01\x02\
    \x06\x05\x12\x03\x17\x02\x08\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x17\
    \t\x10\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03\x17\x13\x14b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Row::generated_message_descriptor_data());
            messages.push(Column::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DataType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
